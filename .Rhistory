att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
ggnet2(network(one_mode_projection),
label = TRUE)
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(centrality_df)
centralization(net_undirected, mode = "graph",FUN = "degree")
centralization(net_undirected, mode = "graph",FUN = "betweenness")
centralization(net_undirected, mode = "graph",FUN = "closeness")
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL),
caption = "Types of networks in sports based on Waesche et al. (2017)")
print(types_of_edges_table, type = 'html', include.rownames = F)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(centrality_df)
centralization(net_undirected, mode = "graph",FUN = "degree")
centralization(net_undirected, mode = "graph",FUN = "betweenness")
centralization(net_undirected, mode = "graph",FUN = "closeness")
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
getwd()
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position) +
ggsave(file = "figures/nwdata_1.pdf", width = 24, height = 20, units = 'cm')
knitr::include_graphics(rep("figures/nwdata_1.pdf"))
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL),
caption = "Types of networks in sports based on Waesche et al. (2017)")
print(types_of_edges_table, type = 'html', include.rownames = F)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph")
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(centrality_df)
centralization(net_undirected, mode = "graph",FUN = "degree")
centralization(net_undirected, mode = "graph",FUN = "betweenness")
centralization(net_undirected, mode = "graph",FUN = "closeness")
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL),
caption = "Types of networks in sports based on Waesche et al. (2017)")
print(types_of_edges_table, type = 'html', include.rownames = F)
library(knitr)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
ggnet2(network(one_mode_projection),
label = TRUE)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph")
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(centrality_df)
centralization(net_undirected, mode = "graph",FUN = "degree")
centralization(net_undirected, mode = "graph",FUN = "betweenness")
centralization(net_undirected, mode = "graph",FUN = "closeness")
