att <- att[friends_adjmatch(att$Name, unique_names),]
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
net_directed <- network(mat,directed = T) #make a directed network object
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(mat,directed = F) #make an undirected network object
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph")
bet <- betweenness(mat,gmode = "graph")
df <- data.frame(bet, clo, deg, row.names = rownames(friends_adjmat))
clo
bet
bet <- betweenness(net_undirected,gmode = "graph")
bet
df <- data.frame(bet, clo, deg, row.names = rownames(friends_adjmat))
round(df,digits = 2) #dieser Befehl rundet alle EintrÃ¤ge in df auf zwei Stellen.
component.largest(net_directed)
largest_component <- component.largest(net_directed)
net_directed[largest_component, largest_component]
net_directed
net_directed[largest_component, largest_component]
largest_component <- component.largest(net_undirected)
net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
net_undirected
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
net_directed
net_undirected
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
ggnet2(net_undirected, node.label = T) #plot undirected network
library(statnet)
library(GGally)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(df,digits = 2) #just a bit of rounding.
cor(df)
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet + 1) #plot undirected network
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(df)
cor(centrality_df)
?gden
library(statnet)
?gden
knitr::opts_chunk$set(fig.path = 'mainimages/')
library(knitr)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
knitr::opts_chunk$set(fig.path = 'mainimages/')
library(knitr)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
att
adj_list
knitr::opts_chunk$set(fig.path = 'mainimages/')
library(knitr)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list <- adj_list[-1,]
att
adj_list
adj_list[,2]
lapply(adj_list[,2], strsplit, split = ",")
unlist(lapply(adj_list[,2], strsplit, split = ","))
lapply(adj_list[,2], strsplit, split = ",")
max(unlist(lapply(vec_list, length)))
vec_list <- lapply(adj_list[,2], strsplit, split = ",")
max(unlist(lapply(vec_list, length)))
unlist(lapply(vec_list, length))
vec_list
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = T)
unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = T)
unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
max(unlist(lapply(vec_list, length)))
matrix(nrow = length(vec_list), ncol = max_adjlist)
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
max_adjlist <- max(unlist(lapply(vec_list, length)))
matrix(nrow = length(vec_list), ncol = max_adjlist)
vec_list
vector(1,)
vector(1,3)
rep(NA,3)
rep(NA,5)
lapply(vec_list, function(x) {rep(NA,max_adjlist)})
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
x + na_vec})
rep(NA,5)
rep(NA,5) + 1
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x})
lapply(vec_list, function(x) rep(NA,max_adjlist)[1:length(x)] <- x)
lapply(vec_list, function(x) {rep(NA,max_adjlist)[1:length(x)]})
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)]})
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x})
lapply(vec_list, function(x) x)
vec_list
adj_list
lapply(vec_list, function (x) ifelse(is.null(x), "", x))
lapply(vec_list, function (x) ifelse(length(x) == 0, "", x))
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list <- lapply(vec_list, function (x) ifelse(length(x) == 0, "", x))
max_adjlist <- max(unlist(lapply(vec_list, length)))
matrix(nrow = length(vec_list), ncol = max_adjlist)
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list <- lapply(vec_list, function (x) ifelse(length(x) == 0, "", x))
max_adjlist <- max(unlist(lapply(vec_list, length)))
matrix(nrow = length(vec_list), ncol = max_adjlist)
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x})
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list <- lapply(vec_list, function (x) ifelse(length(x) == 0, "", x))
max_adjlist <- max(unlist(lapply(vec_list, length)))
matrix(nrow = length(vec_list), ncol = max_adjlist)
vec_list
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list <- lapply(vec_list, function (x) ifelse(length(x) == 0, "", x))
vec_list
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list
lapply(vec_list, function (x) x)
lapply(vec_list, function (x) length(x))
lapply(vec_list, function (x) ifelse(length(x) == 0, x, ""))
lapply(vec_list, function (x) ifelse(length(x) != 0, x, ""))
lapply(vec_list, function (x) length(x))
unlist(lapply(vec_list, function (x) length(x)))
vec_list[unlist(lapply(vec_list, function (x) length(x))) == 0]
vec_list[unlist(lapply(vec_list, function (x) length(x))) == 0] <- ""
max_adjlist <- max(unlist(lapply(vec_list, length)))
adj_mat <- matrix(nrow = length(vec_list), ncol = max_adjlist)
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x})
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})
matrix(unlist(lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})),ncol = max_adjlist)
matrix(unlist(lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})),ncol = max_adjlist + 1)
matrix(unlist(lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})),ncol = max_adjlist)
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})
unlist(lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec})
do.call(lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}),c)
(do.call(what = "c",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
))
do.call(what = "c",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
do.call(what = "rbind",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
do.call(what = "rbind",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
adjlist_mat <- do.call(what = "rbind",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
cbind(adj_list[,1], adjlist_mat)
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list[unlist(lapply(vec_list, function (x) length(x))) == 0] <- NA
max_adjlist <- max(unlist(lapply(vec_list, length)))
adjlist_mat <- do.call(what = "rbind",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
cbind(adj_list[,1], adjlist_mat)
el <-
cbind(
c(apply(adjlist_mat,1,function(x) rep(x[1], length(x)-1))),
c(apply(adjlist_mat,1,function(x) x[2:length(x)]))
)
el <- el[!(is.na(el[,2])),]
el
adjlist_mat
knitr::opts_chunk$set(fig.path = 'mainimages/')
library(knitr)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list <- adj_list[-1,]
att
vec_list <- unlist(lapply(adj_list[,2], strsplit, split = ","),recursive = F)
vec_list[unlist(lapply(vec_list, function (x) length(x))) == 0] <- NA
max_adjlist <- max(unlist(lapply(vec_list, length)))
adjlist_mat <- do.call(what = "rbind",lapply(vec_list, function(x) {na_vec <- rep(NA,max_adjlist)
na_vec[1:length(x)] <- x
na_vec}))
adjlist_mat <- cbind(adj_list[,1], adjlist_mat)
adjlist_mat
el <-
cbind(
c(apply(adjlist_mat,1,function(x) rep(x[1], length(x)-1))),
c(apply(adjlist_mat,1,function(x) x[2:length(x)]))
)
el <- el[!(is.na(el[,2])),]
el
