read.csv("bookdown_resources/Waescher_table.csv")
library(kniter)
library(knitr)
kable(read.csv("bookdown_resources/Waescher_table.csv"))
?kable
library(xtable)
xtable(read.csv("bookdown_resources/Waescher_table.csv"))
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv"))
print(types_of_edges_table)
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv"))
print(types_of_edges_table, type = 'html')
read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F)
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F))
print(types_of_edges_table, type = 'html')
library(xtable)
types_of_edges_table <- xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description")))
print(types_of_edges_table[,2:3], type = 'html')
read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL)
xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL)
)
xtable(read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL))
read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL)
read.csv("bookdown_resources/Waescher_table.csv", stringsAsFactors = F, col.names = c("Network type", "Description"), row.names = NULL)
myel <- read.csv("bookdown_resources/nati_friends.csv")
myel
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel
c(myel)
unique(myel)
unique(myel)
unique_names <- unique(c(myel$Sender, myel$Receiver))
unique_names
mat <- matrix(nrow = length(unique_names), ncol = length(unique_names))
dimnames(mat)
dimnames(mat) <- unique_names
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
mat
rownames(mat) <- unique_names
mat[myel] <- 1
myel
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel
myel
mat[myel]
mat[myel[,c(1,2)]]
mat
unique_names <- unique(c(myel$Sender, myel$Receiver))
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(mat) <- unique_names
rownames(mat) <- unique_names
mat[myel[,c(1,2)]] <- 1
mat[myel] <- 1
is.vector(myel)
class(myel)
mat[cbind(myel$Sender,myel$Receiver)] <- 1
mat
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_names <- unique(c(myel$Sender, myel$Receiver))
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(mat) <- unique_names
rownames(mat) <- unique_names
mat[myel$Sender,myel$Receiver] <- 1
mat
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(mat) <- unique_names
rownames(mat) <- unique_names
mat[cbind(myel$Sender,myel$Receiver)] <- 1
mat
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att
myel <- myel[myel$Receiver != "Alle",]
unique_names <- unique(c(myel$Sender, myel$Receiver))
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(mat) <- unique_names
rownames(mat) <- unique_names
mat[cbind(myel$Sender,myel$Receiver)] <- 1
unique_names
att <- att[att$Name %in% unique_names]
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att
att
order(unique_names)
att$Name[unique_names]
unique_names
att$Name
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(mat) <- unique_names
rownames(mat) <- unique_names
mat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att
att
att[unique_names,]
att$Name
att <- att[match(att$Name, unique_names),]
att
att
apply(mat, 2, c)
apply(mat, 2, sum)
rbind(colnames(mat),mat)
apply(rbind(colnames(mat),mat), 2, function(x) ifelse(x == 1,x[1],""))
apply(adj_list, 1, paste)
adj_list <- apply(rbind(colnames(mat),mat), 2, function(x) ifelse(x == 1,x[1],""))
apply(adj_list, 1, paste)
apply(adj_list, 1, paste(collapse = ""
))
apply(adj_list, 1, paste, collapse = "")
apply(adj_list, 1, paste, collapse = ",")
apply(adj_list, 1, paste, collapse = "")
adj_list
cbind(rownames(adjlist),apply(adj_list, 1, paste, collapse = ""))
cbind(rownames(adj_list),apply(adj_list, 1, paste, collapse = ""))
cbind(rownames(adj_list),apply(adj_list, 1, paste, collapse = ","))
adj_list
adj_list[1,]
cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
adj_list[-1,]
adj_list <- apply(rbind(colnames(mat),mat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
adj_list[-1,]
rownames(adj_list) <- NULL
adj_list[-1,]
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
twomode_el
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(c(twomode_el$, myel$Receiver))
unique_players <- unique(c(twomode_el$Player)
mat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
ggnet2(mat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
library(GGally)
ggnet2(mat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04)
ggnet2(bip_mat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04)
ggnet2(bip_mat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = "Mode")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
color = "mode")
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
color = "mode")
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode")
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 1)
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2)
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
one_mode_projection
one_mode_projection[1:10,1:10]
ggnet2(network(one_mode_projection, ignore.eval = FALSE),
label = TRUE,
arrow.size = 4, arrow.gap = 0.04)
ggnet2(network(one_mode_projection, ignore.eval = FALSE, names.eval = "weights"),
label = TRUE, edge.size = "weights",
arrow.size = 4, arrow.gap = 0.04)
one_mode_projection
ggnet2(network(one_mode_projection, ignore.eval = FALSE, names.eval = "weights"),
label = TRUE, edge.size = "weights")
network(one_mode_projection, ignore.eval = FALSE, names.eval = "weights")
net <- network(one_mode_projection, ignore.eval = FALSE, names.eval = "weights")
get.edge.attribute(net,"weights")
one_mode_projection
ggnet2(network(one_mode_projection),
label = TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(statnet)
library(ggplot2)
library(GGally)
library(scales)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- friends_adjmatrix(0, nrow = length(unique_names), ncol = length(unique_names))
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[friends_adjmatch(att$Name, unique_names),]
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
## plot the network
ggnet2(friends_adjmat,
label = TRUE,
arrow.size = 4, arrow.gap = 0.04,
node.color = att$Position)
myel
friends_adjmat[1:10,1:10]
adj_list <- apply(rbind(colnames(friends_adjmat),friends_adjmat), 2, function(x) ifelse(x == 1,x[1],""))
adj_list <- cbind(rownames(adj_list),apply(adj_list, 1, function(x) paste(x[x !=""], collapse = ",")))
rownames(adj_list) <- NULL
adj_list[-1,]
twomode_el <- read.csv("bookdown_resources/nati_teams.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
unique_players <- unique(twomode_el$Player)
unique_teams <- unique(twomode_el$Team)
bip_mat <- matrix(0, nrow = length(unique_players), ncol = length(unique_teams))
colnames(bip_mat) <- unique_teams
rownames(bip_mat) <- unique_players
bip_mat[cbind(twomode_el$Player,twomode_el$Team)] <- 1
col = c("actor" = "forest green", "event" = "light blue")
ggnet2(network(bip_mat, matrix.type = "bipartite"),
label = TRUE, palette = col,
color = "mode", label.size = 2.5)
bip_mat[1:4,1:7]
one_mode_projection <- bip_mat %*% t(bip_mat)
diag(one_mode_projection) <- 0 #exclude self-ties
one_mode_projection[1:10,1:10] #look at the first 10 players
net_directed <- network(mat,directed = T) #make a directed network object
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(mat,directed = F) #make an undirected network object
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph")
bet <- betweenness(mat,gmode = "graph")
df <- data.frame(bet, clo, deg, row.names = rownames(friends_adjmat))
clo
bet
bet <- betweenness(net_undirected,gmode = "graph")
bet
df <- data.frame(bet, clo, deg, row.names = rownames(friends_adjmat))
round(df,digits = 2) #dieser Befehl rundet alle Einträge in df auf zwei Stellen.
component.largest(net_directed)
largest_component <- component.largest(net_directed)
net_directed[largest_component, largest_component]
net_directed
net_directed[largest_component, largest_component]
largest_component <- component.largest(net_undirected)
net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
net_undirected
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
net_directed
net_undirected
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
ggnet2(net_undirected, node.label = T) #plot undirected network
library(statnet)
library(GGally)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(df,digits = 2) #just a bit of rounding.
cor(df)
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet + 1) #plot undirected network
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
library(statnet)
library(GGally)
myel <- read.csv("bookdown_resources/nati_friends.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
myel <- myel[myel$Receiver != "Alle",]
## create adjacency matrix
unique_names <- unique(c(myel$Sender, myel$Receiver))
friends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))
colnames(friends_adjmat) <- unique_names
rownames(friends_adjmat) <- unique_names
friends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1
att <- read.csv("bookdown_resources/nati_atts.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
att <- att[att$Name %in% unique_names,]
att <- att[match(att$Name, unique_names),]
friends_adjmat[1:5,1:5]
net_directed <- network(friends_adjmat,directed = T) #make a directed network object
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
net_undirected <- network(friends_adjmat,directed = F) #make an undirected network object
ggnet2(net_undirected, node.label = T) #plot undirected network
largest_component <- component.largest(net_undirected)
adj_mat_largest_comp <- net_undirected[largest_component, largest_component]
net_undirected <- network(adj_mat_largest_comp, directed = F)
adj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]
net_directed <- network(adj_mat_largest_comp_directed, directed = T)
ggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network
gden(dat = net_undirected,mode = "graph") #calculate with gden function
gden(net_directed,mode = "digraph")
degree(net_undirected,gmode = "graph")
deg <- degree(net_undirected,gmode = "graph") #calculate a vector of degree values for all nodes in
clo <- closeness(net_undirected,gmode = "graph", )
bet <- betweenness(net_undirected,gmode = "graph")
centrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))
round(centrality_df,digits = 2) #just a bit of rounding.
ggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network
cor(df)
cor(centrality_df)
