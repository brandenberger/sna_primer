{
    "collab_server" : "",
    "contents" : "\n# A step by step guide to computing centrality measures in statnet\n\n## Preparation\n\nWhat is statnet? It's a compendium of R tools which greatly facilitate network analysis. That is why we load it first:\n\n```{r, echo=T, warning=F, message=F}\nlibrary(statnet)\n```\n\nWe also need the package GGally. GGally contains _ggnet2_, which allows us to create pretty network visualizations.\n\n```{r, echo=T, warning=F, message=F}\nlibrary(GGally)\n```\n\nggnet2 is beautifully documented under https://briatte.github.io/ggnet/\n\n## Objekte vom Typ network\n\nIn the following, we will utilize the friendship network of the Swiss national soccer team. Let's quickly recall the adjacency matrix.\n\n\n```{r, echo=F}\nmyel <- read.csv(\"bookdown_resources/nati_friends.csv\", stringsAsFactors = FALSE, encoding = \"UTF-8\")\nmyel <- myel[myel$Receiver != \"Alle\",]\n\n## create adjacency matrix\n\nunique_names <- unique(c(myel$Sender, myel$Receiver))\nfriends_adjmat <- matrix(0, nrow = length(unique_names), ncol = length(unique_names))\ncolnames(friends_adjmat) <- unique_names\nrownames(friends_adjmat) <- unique_names\nfriends_adjmat[cbind(myel$Sender,myel$Receiver)] <- 1\n\natt <- read.csv(\"bookdown_resources/nati_atts.csv\", stringsAsFactors = FALSE, encoding = \"UTF-8\")\natt <- att[att$Name %in% unique_names,]\natt <- att[match(att$Name, unique_names),]\n```\n\n```{r}\nfriends_adjmat[1:5,1:5]\n```\n\nWe will create two _network_ objects out of this matrix. Objects of type network are a specific way to save networks in R. They are created using the function network().\n\nWe first create a directed network with the option directed = T, which we name net_directed.\nWir erstellen ein gerichtetes Netzwerk-Objekt mit der Option directed = T, welches wir net_directed nennen.\n\n```{r}\nnet_directed <- network(friends_adjmat,directed = T) #make a directed network object\n```\n\nLet's plot the object with ggnet.\n\n```{r}\nggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network\n```\n\nUsing the option directed = F, we can create an undirected network object, which we can also plot with ggnet2.\n\n```{r}\nnet_undirected <- network(friends_adjmat,directed = F) #make an undirected network object\n```\n```{r}\nggnet2(net_undirected, node.label = T) #plot undirected network\n```\n\nWe can now do different operation on these network objects by feeding them into functions. The first operation is already depicted above. With plot() or ggnet2(), we can create network graphics. But we can go a long way beyond this and use more formalized ways of analyzing network structure.\n\nA first operation we can do is to only use the largest connected component of the network for further calculation. This is done here to simplify interpretation.\n\n```{r, results='hide'}\nlargest_component <- component.largest(net_undirected)\nadj_mat_largest_comp <- net_undirected[largest_component, largest_component]\nnet_undirected <- network(adj_mat_largest_comp, directed = F)\n\nadj_mat_largest_comp_directed <- net_directed[largest_component, largest_component]\nnet_directed <- network(adj_mat_largest_comp_directed, directed = T)\n```\n\nThe network now looks like this - only the largest components remains.\n\n```{r}\nggnet2(net_directed, node.label = T, arrow.size = 3, arrow.gap = 0.05) #plot directed network\n```\n\n\n\n## Density\n\nFirst, let's compute the density of the undirected network. We can do this using the function gden(). For most network metrics, it is important if the network is directed or net. We can tell the function about this using the parameter _mode_. Setting mode to \"graph\", calculates density according to the formula for an undirected network.\n\n```{r}\ngden(dat = net_undirected,mode = \"graph\") #calculate with gden function\n```\n\nSetting mode to digraph, does the same for a directed network.\n\n```{r}\ngden(net_directed,mode = \"digraph\")\n```\n\n\n## Node-level centrality measures\n\nUsing the function degree(), we can now calculate the degree centrality of every mode in the network.\nUsing the degree function on the undirected network (remember that we have to specify \"graph\" again for this), we receive a vector of degree centralitiy for each node.\n\n```{r}\ndegree(net_undirected,gmode = \"graph\")\n```\n\nTo further work with these degree values, we have to write them into an object. Thus, we write the vector we receive by running degree into an R object we call deg.\n\n```{r}\ndeg <- degree(net_undirected,gmode = \"graph\") #calculate a vector of degree values for all nodes in\n```\n\nLet's do the same things for closeness and betweenness.\n\n```{r}\nclo <- closeness(net_undirected,gmode = \"graph\", )\nbet <- betweenness(net_undirected,gmode = \"graph\")\n```\n\nWhat do we do with this now. For example, we can create a data frame of all nodes in the undirected network with their respective degree, closeness and betweennes values.\n\nTo do so, we combine the three vectors in a data frame.\n\n```{r}\ncentrality_df <- data.frame(bet, clo, deg, row.names = rownames(adj_mat_largest_comp))\nround(centrality_df,digits = 2) #just a bit of rounding.\n```\n\nLet's now size the nodes in our visualization according to betweenness. Who holds the network together?\n\n```{r}\nggnet2(net_undirected, node.label = T, node.size = centrality_df$bet) #plot undirected network\n```\n\nWe can now for example look at correlation between our centrality measures (these are usually quite high).\n\n```{r}\ncor(centrality_df)\n```\n\nDas Resultat zeigt auf, dass die verschiedenen ZentralitÃ¤tsmasse stark miteinander korreliert sind. Dies ist meistens der Fall.\n\n\n\n\n## Global centrality measures\n\nWe can also use the network objects to compute global centralization measures. To do so wie use the function centralization(). The parameter _FUN_ in centralization() allows to specify the centrality measure to base our centralization score on. For example, we can choose degree:\n\n```{r}\ncentralization(net_undirected, mode = \"graph\",FUN = \"degree\")\n```\n\nBut also, as before, betweenness and closeness.\n```{r}\ncentralization(net_undirected, mode = \"graph\",FUN = \"betweenness\")\ncentralization(net_undirected, mode = \"graph\",FUN = \"closeness\")\n```\n",
    "created" : 1521643297694.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1577557312",
    "id" : "F9E82BD",
    "lastKnownWriteTime" : 1523525625,
    "last_content_update" : 1523525625948,
    "path" : "~/Documents/GitHub/sna_primer/3_step_by_step_centrality_measures.Rmd",
    "project_path" : "3_step_by_step_centrality_measures.Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}